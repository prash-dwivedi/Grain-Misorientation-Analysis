# misorientation_angle.py

"""
Misorientation Angle Calculation Script for OVITO

This script calculates the misorientation angle between two grains using quaternion orientations 
from the Grain List generated by OVITO's Grain Segmentation modifier. It is intended for researchers 
working on grain boundary analysis and crystal orientation relationships in polycrystalline materials.

Features:
- Computes the misorientation angle between two specified grains.
- Provides detailed error handling for invalid or missing grain IDs.
- Outputs the angle in degrees for easy interpretation.

Usage:
1. Apply the Grain Segmentation modifier in OVITO to generate the Grain List.
2. Attach this script to the pipeline.
3. Specify the grain IDs for the two grains of interest (default: grain_A = 1, grain_B = 2).

Requirements:
- OVITO Pro
- Python (within OVITO's scripting environment)
- NumPy library

Developed by: Prashant Dwivedi
"""

# Import necessary modules
from ovito.data import *
import numpy as np

def modify(frame: int, data: DataCollection, grain_A=1, grain_B=2):
    """
    Computes the misorientation angle between two specified grains.

    Parameters:
    - frame (int): The current animation frame (required by OVITO).
    - data (DataCollection): The data pipeline containing grain segmentation information.
    - grain_A (int): The ID of the first grain (default: 1).
    - grain_B (int): The ID of the second grain (default: 2).

    Output:
    - Prints the misorientation angle in degrees to the console.
    """
    # Check if grain segmentation data is available
    if 'grains' not in data.tables:
        print("No grain information found. Please perform Grain Segmentation analysis first.")
        return 

    # Retrieve grain orientation and identifier data from the Grain List
    grain_orientation = data.tables['grains']['Orientation']
    grain_identifier = data.tables['grains']['Grain Identifier']

    # Validate grain IDs
    if grain_A not in grain_identifier:
        print(f"Grain {grain_A} does not exist. Please check the Grain List in the Data Inspector.")
        return 
    if grain_B not in grain_identifier:
        print(f"Grain {grain_B} does not exist. Please check the Grain List in the Data Inspector.")
        return 

    # Extract quaternion orientations for the specified grains
    o_A = grain_orientation[grain_identifier == grain_A][0]
    o_B = grain_orientation[grain_identifier == grain_B][0]

    # Calculate the misorientation angle
    angle = 2 * np.arccos(o_A[3]*o_B[3] + o_A[0]*o_B[0] + o_A[1]*o_B[1] + o_A[2]*o_B[2])

    # Print the result in degrees
    print(f"The misorientation angle between grains {grain_A} and {grain_B} is: {np.degrees(angle):.2f} degrees.")
